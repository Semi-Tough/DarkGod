//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg
{ 

public sealed partial class MapConfig :  Bright.Config.BeanBase 
{
    public MapConfig(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["mapName"].IsString) { throw new SerializationException(); }  MapName = _json["mapName"]; }
        { if(!_json["sceneName"].IsString) { throw new SerializationException(); }  SceneName = _json["sceneName"]; }
        { if(!_json["power"].IsNumber) { throw new SerializationException(); }  Power = _json["power"]; }
        { var _json2 = _json["mainCamPos"]; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  MainCamPos = new UnityEngine.Vector3(__x, __y,__z); }
        { var _json2 = _json["mainCamRote"]; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  MainCamRote = new UnityEngine.Vector3(__x, __y,__z); }
        { var _json2 = _json["playerBornPos"]; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  PlayerBornPos = new UnityEngine.Vector3(__x, __y,__z); }
        { var _json2 = _json["playerBornRote"]; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  PlayerBornRote = new UnityEngine.Vector3(__x, __y,__z); }
        { if(!_json["exp"].IsNumber) { throw new SerializationException(); }  Exp = _json["exp"]; }
        { if(!_json["coin"].IsNumber) { throw new SerializationException(); }  Coin = _json["coin"]; }
        { if(!_json["crystal"].IsNumber) { throw new SerializationException(); }  Crystal = _json["crystal"]; }
        { var __json0 = _json["monsterList"]; if(!__json0.IsArray) { throw new SerializationException(); } MonsterList = new System.Collections.Generic.List<MapMonster>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { MapMonster __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = MapMonster.DeserializeMapMonster(__e0);  }  MonsterList.Add(__v0); }   }
        PostInit();
    }

    public MapConfig(int id, string mapName, string sceneName, int power, UnityEngine.Vector3 mainCamPos, UnityEngine.Vector3 mainCamRote, UnityEngine.Vector3 playerBornPos, UnityEngine.Vector3 playerBornRote, int exp, int coin, int crystal, System.Collections.Generic.List<MapMonster> monsterList ) 
    {
        this.Id = id;
        this.MapName = mapName;
        this.SceneName = sceneName;
        this.Power = power;
        this.MainCamPos = mainCamPos;
        this.MainCamRote = mainCamRote;
        this.PlayerBornPos = playerBornPos;
        this.PlayerBornRote = playerBornRote;
        this.Exp = exp;
        this.Coin = coin;
        this.Crystal = crystal;
        this.MonsterList = monsterList;
        PostInit();
    }

    public static MapConfig DeserializeMapConfig(JSONNode _json)
    {
        return new MapConfig(_json);
    }

    /// <summary>
    /// 地图ID
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 地图名
    /// </summary>
    public string MapName { get; private set; }
    /// <summary>
    /// 场景名
    /// </summary>
    public string SceneName { get; private set; }
    /// <summary>
    /// 需要体力
    /// </summary>
    public int Power { get; private set; }
    /// <summary>
    /// 初始相机位置
    /// </summary>
    public UnityEngine.Vector3 MainCamPos { get; private set; }
    /// <summary>
    /// 初始相机旋转
    /// </summary>
    public UnityEngine.Vector3 MainCamRote { get; private set; }
    /// <summary>
    /// 初始玩家位置
    /// </summary>
    public UnityEngine.Vector3 PlayerBornPos { get; private set; }
    /// <summary>
    /// 初始玩家旋转
    /// </summary>
    public UnityEngine.Vector3 PlayerBornRote { get; private set; }
    /// <summary>
    /// 经验值
    /// </summary>
    public int Exp { get; private set; }
    /// <summary>
    /// 金币
    /// </summary>
    public int Coin { get; private set; }
    /// <summary>
    /// 宝石
    /// </summary>
    public int Crystal { get; private set; }
    /// <summary>
    /// 怪物列表
    /// </summary>
    public System.Collections.Generic.List<MapMonster> MonsterList { get; private set; }

    public const int __ID__ = -1840922722;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var _e in MonsterList) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in MonsterList) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "MapName:" + MapName + ","
        + "SceneName:" + SceneName + ","
        + "Power:" + Power + ","
        + "MainCamPos:" + MainCamPos + ","
        + "MainCamRote:" + MainCamRote + ","
        + "PlayerBornPos:" + PlayerBornPos + ","
        + "PlayerBornRote:" + PlayerBornRote + ","
        + "Exp:" + Exp + ","
        + "Coin:" + Coin + ","
        + "Crystal:" + Crystal + ","
        + "MonsterList:" + Bright.Common.StringUtil.CollectionToString(MonsterList) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
