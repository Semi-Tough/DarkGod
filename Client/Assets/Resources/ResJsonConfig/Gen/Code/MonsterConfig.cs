//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg
{ 

public sealed partial class MonsterConfig :  Bright.Config.BeanBase 
{
    public MonsterConfig(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  Name = _json["name"]; }
        { if(!_json["type"].IsNumber) { throw new SerializationException(); }  Type = _json["type"]; }
        { if(!_json["isStop"].IsBoolean) { throw new SerializationException(); }  IsStop = _json["isStop"]; }
        { if(!_json["resPath"].IsString) { throw new SerializationException(); }  ResPath = _json["resPath"]; }
        { if(!_json["skillID"].IsNumber) { throw new SerializationException(); }  SkillID = _json["skillID"]; }
        { if(!_json["atkDis"].IsNumber) { throw new SerializationException(); }  AtkDis = _json["atkDis"]; }
        { if(!_json["props"].IsObject) { throw new SerializationException(); }  Props = BattleProps.DeserializeBattleProps(_json["props"]);  }
        PostInit();
    }

    public MonsterConfig(int id, string name, int type, bool isStop, string resPath, int skillID, float atkDis, BattleProps props ) 
    {
        this.Id = id;
        this.Name = name;
        this.Type = type;
        this.IsStop = isStop;
        this.ResPath = resPath;
        this.SkillID = skillID;
        this.AtkDis = atkDis;
        this.Props = props;
        PostInit();
    }

    public static MonsterConfig DeserializeMonsterConfig(JSONNode _json)
    {
        return new MonsterConfig(_json);
    }

    public int Id { get; private set; }
    /// <summary>
    /// 名字
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 类型
    /// </summary>
    public int Type { get; private set; }
    /// <summary>
    /// 技能中断
    /// </summary>
    public bool IsStop { get; private set; }
    /// <summary>
    /// 资源路径
    /// </summary>
    public string ResPath { get; private set; }
    /// <summary>
    /// 技能id
    /// </summary>
    public int SkillID { get; private set; }
    /// <summary>
    /// 攻击距离
    /// </summary>
    public float AtkDis { get; private set; }
    /// <summary>
    /// 血量
    /// </summary>
    public BattleProps Props { get; private set; }

    public const int __ID__ = -55174244;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        Props?.Resolve(_tables);
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        Props?.TranslateText(translator);
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Type:" + Type + ","
        + "IsStop:" + IsStop + ","
        + "ResPath:" + ResPath + ","
        + "SkillID:" + SkillID + ","
        + "AtkDis:" + AtkDis + ","
        + "Props:" + Props + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
